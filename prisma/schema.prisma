generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  role              UserRole  @default(USER)
  kindeId           String?   @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  paymentPreference String    @default("CARD")
  phoneNumber       String?
  accounts          Account[]
  sessions          Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id           String         @id @default(cuid())
  title        String
  description  String?
  price        Float
  place        String?
  capacity     Int            @default(0)
  from         DateTime
  to           DateTime
  created_at   DateTime
  visible      Boolean        @default(true)
  bankAccountId String?       // Optional: specific bank account for this event
  Registration Registration[]
  WaitingList  WaitingList[]
}

model Registration {
  id           String   @id @default(cuid())
  event_id     String
  first_name   String
  last_name    String?
  email        String
  phone_number String?
  payment_type String
  created_at   DateTime
  attended     Boolean  @default(false)
  deleted      Boolean  @default(false)
  payment      Payment?
  event        Event    @relation(fields: [event_id], references: [id])

  @@unique([event_id, email, first_name, last_name])
}

model WaitingList {
  id           String   @id @default(cuid())
  event_id     String
  first_name   String
  last_name    String?
  email        String
  phone_number String?
  payment_type String
  created_at   DateTime
  event        Event    @relation(fields: [event_id], references: [id])
}

model Payment {
  id              String       @id @default(cuid())
  registration_id String       @unique
  variable_symbol String
  qr_data         String
  paid            Boolean
  created_at      DateTime
  registration    Registration @relation(fields: [registration_id], references: [id], onDelete: Cascade)
}

model RegistrationHistory {
  id              String   @id @default(cuid())
  event_id        String
  registration_id String?
  waiting_list_id String?
  first_name      String
  last_name       String?
  email           String
  phone_number    String?
  action_type     String
  timestamp       DateTime @default(now())
  user_id         String?
  event_title     String?
}

model playing_with_neon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}

enum UserRole {
  USER
  REGULAR
  MODERATOR
  ADMIN
}

enum RegistrationAction {
  REGISTERED
  UNREGISTERED
  MOVED_TO_WAITLIST
  MOVED_FROM_WAITLIST
  DELETED_BY_MODERATOR
  EVENT_CREATED
  EVENT_DELETED
  EVENT_UPDATED
  REACTIVATED
}
