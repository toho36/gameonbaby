// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  REGULAR
  MODERATOR
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  kindeId       String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  paymentPreference String @default("CARD") // CARD or CASH
  phoneNumber   String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id           String         @id @default(cuid())
  title        String
  description  String?
  price        Float
  place        String?
  capacity     Int            @default(0)
  from         DateTime
  to           DateTime
  created_at   DateTime
  visible      Boolean        @default(true)
  Registration Registration[]
  WaitingList  WaitingList[]
}

model Registration {
  id           String   @id @default(cuid())
  event        Event    @relation(fields: [event_id], references: [id])
  event_id     String
  first_name   String
  last_name    String?
  email        String
  phone_number String?
  payment_type String
  created_at   DateTime
  payment      Payment?
  attended     Boolean  @default(false)
  deleted      Boolean  @default(false)

  @@unique([event_id, email, first_name, last_name])
}

model WaitingList {
  id           String   @id @default(cuid())
  event        Event    @relation(fields: [event_id], references: [id])
  event_id     String
  first_name   String
  last_name    String?
  email        String
  phone_number String?
  payment_type String
  created_at   DateTime
}

model Payment {
  id              String       @id @default(cuid())
  registration    Registration @relation(fields: [registration_id], references: [id], onDelete: Cascade)
  registration_id String       @unique
  variable_symbol String
  qr_data         String
  paid            Boolean
  created_at      DateTime
}

// Add this new model to track registration history events
model RegistrationHistory {
  id               String              @id @default(cuid())
  event_id         String
  registration_id  String?
  waiting_list_id  String?
  first_name       String
  last_name        String?
  email            String
  phone_number     String?
  action_type      String              @db.Text
  timestamp        DateTime          @default(now())
  user_id          String?
  event_title      String?
}

enum RegistrationAction {
  REGISTERED
  UNREGISTERED
  MOVED_TO_WAITLIST
  MOVED_FROM_WAITLIST
  DELETED_BY_MODERATOR
  EVENT_CREATED
  EVENT_DELETED
  EVENT_UPDATED
  REACTIVATED
}
